/*
===============================================================================

This source file is part of libextant
libextant is made available under the MIT License.

Copyright (c) 2016-2020 Javier Castillo II

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

===============================================================================
*/

#ifndef _XTNT_LOG_H_
#define _XTNT_LOG_H_

#include <extant/error.h>

#include <extant/set.h>

#ifdef XTNT_DEFAULT_LOG_BATCH_SIZE
#define XTNT_LOG_BATCH_SIZE (XTNT_DEFAULT_LOG_BATCH_SIZE) /**< Default entry batch size */
#else
#define XTNT_LOG_BATCH_SIZE (16) /**< Default entry batch size */
#endif /* ifndef XTNT_DEFAULT_LOG_BATCH_SIZE */

/**
 * @todo Build out a default log directory, file name and configure options
 */

#ifdef XTNT_LOG_DEFAULT_PATH
#define XTNT_LOG_PATH "#XTNT_LOG_DEFAULT_PATH" /**< Default log file name */
#else
#define XTNT_LOG_PATH "extant.log" /**< Default log file name */
#endif

#ifndef XTNT_DEFAULT_LOG_LEVEL
#define XTNT_LOG_LEVEL_DEFAULT (15) /**< All standard log entry bits */
#else
#define XTNT_LOG_LEVEL_DEFAULT (XTNT_DEFAULT_LOG_LEVEL) /**< All standard log entry bits */
#endif
#define XTNT_LOG_LEVEL_DEBUG (63) /**< All log entry bits */
#define XTNT_LOG_DEBUG (32) /**< Debug log bit */
#define XTNT_LOG_LEVEL_CRITICAL (15) /**< Critical log entry bits */
#define XTNT_LOG_CRITICAL (8) /**< Critical log entry bit */
#define XTNT_LOG_LEVEL_ERROR (7) /**< Error log entry bits */
#define XTNT_LOG_ERROR (4) /**< Error log entry bit */
#define XTNT_LOG_LEVEL_WARNING (3) /**< Warning log entry bits */
#define XTNT_LOG_WARNING (2) /**< Warning log entry bit */
#define XTNT_LOG_LEVEL_INFO (1) /**< Info log entry bits */
#define XTNT_LOG_INFO (1) /**< Info log entry bit */
#define XTNT_LOG_LEVEL_QUIET (0) /**< No log entry bits */

#define XTNT_LOGGER_OPEN (0) /**< Logger accepting logs */
#define XTNT_LOGGER_CLOSING (1) /**< Logger no longer accepting */
#define XTNT_LOGGER_CLOSED (2) /**< Logger should no longer be referenced */
#define XTNT_LOGGER_WRITE_FAIL (3) /**< Failed to write */
#define XTNT_LOGGER_PENDING_EXIT (6144) /**< Requested logger exit */
#define XTNT_LOGGER_COMPLETED_EXIT (2048) /**< Logger completed exit */

/**
 * @struct xtnt_logger
 *
 * The xtnt_logger is used to manage a threaded logging system
 */
struct xtnt_logger
{
/**
 * @private
 * The file handle for writing
 */
    FILE *log;
/**
 * @private
 * The file name opened if file handle was not directly provided
 */
    char *filename;
/**
 * @private
 * The state of the Logger
 */
    xtnt_uint_t state;
/**
 * @public
 * The default logging level active for this logger
 */
    xtnt_uint_t default_level;
/**
 * @public
 * The queue of entries the logger operates on
 */
    struct xtnt_node_set queue;
/**
 * @public
 * The lock for the logger used when changing state
 */
    pthread_mutex_t lock;
};

#define XTNT_LOG_ENTRY_INIT_FAIL (1) /**< Failed to initialize */

/**
 * @struct xtnt_logger_entry
 * The entries for logging
 */
struct xtnt_logger_entry
{
/**
 * @private
 * Reference to function called for formatting string and storing in msg
 */
    void *fmt_fn;
/**
 * @private
 * Reference to data struct used by the `fnt_fn`
 */
    void *data;
/**
 * @private
 * Reference to string generated by `fmt_fn`
 */
    char *msg;
/**
 * @private
 * String length that can be stored at `msg`
 */
    size_t msg_length;
/**
 * @private
 * State of the entry
 */
    xtnt_uint_t state;
/**
 * @private
 * Logging level of the entry
 */
    xtnt_uint_t level;
/**
 * @private
 * Self-referential node for queueing
 */
    struct xtnt_node node;
};

xtnt_status_t
xtnt_log(
    struct xtnt_logger *logger,
    struct xtnt_logger_entry *entry);

xtnt_status_t
xtnt_logger_change_default_level(
    struct xtnt_logger *logger,
    xtnt_uint_t default_level);

xtnt_status_t
xtnt_logger_create(
    FILE *log,
    const char *filename,
    struct xtnt_logger **logger);

xtnt_status_t
xtnt_logger_destroy(
    struct xtnt_logger **logger);

xtnt_status_t
xtnt_logger_entry_create(
    size_t data_length,
    size_t msg_length,
    void *fmt_fn,
    xtnt_uint_t level,
    struct xtnt_logger_entry **entry);

xtnt_status_t
xtnt_logger_entry_destroy(
    struct xtnt_logger_entry **entry);

xtnt_status_t
xtnt_logger_exit(
    struct xtnt_logger *logger);

xtnt_status_t
xtnt_logger_initialize(
    struct xtnt_logger *logger);

void
xtnt_logger_process(
    struct xtnt_logger *logger);

xtnt_status_t
xtnt_logger_uninitialize(
    struct xtnt_logger *logger);

#endif /* _XTNT_LOG_H_ */
